#!/usr/bin/env python2.7
import sys
import re
import os

from util.invalidTestException import InvalidTestException
from util.log import Log
from util.noCompileException import NoCompileException
from util.runTest import RunTest
from util.subprocessWrapper import SubprocessWrapper
from util.timer import Timer

class Main(object):

    DEFAULT_TIMEOUT = 20
    github_url = "https://github.com/bennn/bubbles"
    SUPPORTED_OPTIONS = {
        "-d": "--directory : Set the directory in which to search for test files. Default is $OCAMLTEST_HOME if set, else the cwd.",
        "-h" : "--help : Print this message, then exit.",
        "-t" : "--timeout : Set the time limit (in seconds) for tests. Default is %s seconds." % DEFAULT_TIMEOUT,
        "-v" : "--version : Echo version number, then exit.",
    }
    version = "1.00"

    def __init__(self, *args):
        self.subprocess = SubprocessWrapper()
        self.log = Log()
        self.pattern = ""
        self.options = self._options(args[1:])

    def find_modules(self, pattern, directory):
        """
            2013-07-28:
                Search the filesystem (`directory` on down) for
                modules matching `pattern`
        """
        find_command = " ".join(["find", directory, "-name", "'*%s*.ml'" % pattern])
        matchesStr = self.subprocess.execute(find_command, on_failure=self.not_found)
        matches = []
        for m in matchesStr.split("\n"):
            # 2013-08-23: We're only concerned with test files. `xxx_test.ml`
            if m.endswith("_test.ml"):
                filename = m.split("/")[-1]
                if re.search(r"[\s]", filename):
                    # 2013-08-26: Whitespace in a module name is invalid anyway.
                    self.log.warn("Skipping test case '%s'. There should be no whitespace in filenames." % filename)
                else:
                    matches.append(m)
        return matches

    def not_found(self, cpe):
        self.log.error("%s  Make certain environment variable OCAMLTEST_HOME is set to a valid folder on your file system." % cpe.output)

    def print_help(self):
        """
            2013-07-28:
                Documentation stub.
        """
        help_message = [
            "  Searches for files ending with '_test.ml' which match the given pattern,\n  or all tests from $OCAMLTEST_HOME on down if no pattern is given",
            "Supported options:"
        ]
        self.print_usage()
        print("\n".join(help_message))
        self.print_supported_options()

    def print_supported_options(self):
        print("\n".join(( "%s %s" % (k, self.SUPPORTED_OPTIONS[k])
            for k in sorted(self.SUPPORTED_OPTIONS.keys()))))

    def print_usage(self):
        print("Usage: ocamltest [options] [pattern]")

    def print_version(self):
        """
            2013-08-25:
                Echo the current version number
        """
        print("ocamltest version %s\nHome directory: %s\nStay updated at: %s" % (self.version, os.getcwd(), self.github_url))

    def run(self):
        """
            2013-08-23:
                Handle control flow, find the test files to be run,
                run a harness for each test file
        """
        # Make sure everything's installed well enough
        self._check_install()
        # Find test files
        to_run = list(self.find_modules(self.pattern, self._directory()))
        if not bool(to_run):
            # No tests, terminate early
            self.log.warn("Found 0 tests matching pattern")
            return
        # We have tests! Start a timer and run them.
        error_messages = {}
        with Timer() as t:
            for test_file in to_run:
                try: 
                    failures = RunTest(test_file, self._timeout()).failures
                    if bool(failures):
                        # 2013-08-23: Something went wrong, better record it.
                        test_name = test_file.split("/")[-1][:-(len(".ml"))]
                        error_messages[test_name] = failures
                except NoCompileException as e:
                    error_messages[test_file] = [("Compilation Failed", e.message)]
                except InvalidTestException as e:
                    # Optionally do something based on status code
                    pass
        self.log.header("Results")
        if bool(error_messages):
            self.log.pprint_failures(error_messages, t.duration)
        else: 
            self.log.success("ALL TESTS PASS in %0.3f seconds" % t.duration)

    def _check_install(self):
        """
            2013-08-22:
                Ensure that everything's installed properly, give descriptive
                warnings if it is not.

                Requirements:
                - OCAMLTEST_HOME env. variable is set. I don't care where it points,
                    but it's supposed to point to the project root, where you want
                    to test from by default
                - ocamltest.ml is installed wherever ocamlc expects to find it
        """
        ocamltest_files = ['ocamltest.cma', 'ocamltest.cmi', 'ocamltest.cmo']
        find_files = ( self.subprocess.execute("find `ocamlc -where` -name '%s'" % fname)
            for fname in ocamltest_files )
        if not (len(ocamltest_files) == len([x for x in find_files if x])):
            self.log.error("\n".join([
                "ocamltest.ml not properly installed. You may either:",
                "       - Run `make install` with root permissions",
                "       - Manually compile 'ocamltest.ml', creating a .cma library (`ocamlc -a -o ocamltest.ml`) and then",
                "         moving 'ocamltest.cma', 'ocamltest.cmo', and 'ocamltest.cmi' to wherever your ocaml standard library files are stored.",
            ]))
            exit(1)

    def _directory(self):
        """
            2013-07-28:
                Q: which part of the filesystem should we search for test files?
                A: 1. the part the user specified with an option,
                   2. the part set in an environment variable,
                   3. or the current working directory
        """
        user_dir = self.options.get("-d", None)
        # Convert to absolute path?
        if user_dir is not None and os.path.exists(user_dir):
            if user_dir.startswith("."):
                user_dir = "%s%s" % (os.getcwd(), user_dir[1:])
            return user_dir
        elif os.environ.get('OCAMLTEST_HOME'):
            return os.environ.get('OCAMLTEST_HOME')
        else:
            return os.getcwd()

    def _collapse_flags(self, args):
        """
            2013-08-22:
                Change all long flags to short flags. For example:
                    --version => -v
        """
        new_args = []
        for arg in args:
            if arg.startswith("--"):
                new_args.append(arg[1:3])
            else:
                new_args.append(arg)
        return new_args

    def _options(self, args):
        """
            2013-08-25:
                Extract the argument-taking options from the commandline args,
                make sure each supplied option is valid.

                TODO test failure routes here
        """
        options = {}
        i = 0
        while i < len(args):
            key, long_key = None, None
            if re.match(r"--[a-z]", args[i]):
                # Found a long-style option. Strip it to short style
                long_key = args[i]
                key = long_key[1:3]
            elif re.match(r"-[a-z]", args[i]):
                # Found a short-style option
                key = args[i]
            else:
                self.pattern = args[i]
            if key is None and (i+1) < len(args):
                # No option found yet `i` wasn't the last argument. Misplaced! 
                self.log.error("Invalid / misplaced argument '%s'" % args[i])
                self.print_usage()
                exit(1)
            elif key is not None:
                # Add the option, make sure it's supported
                try:
                    if key not in self.SUPPORTED_OPTIONS:
                        self.log.error("Unknown option '%s'" % (long_key or key))
                        exit(1)
                    options[key] = args[i+1]
                    i += 2
                except IndexError:
                    self.log.error("Trailing option %s needs an argument" % key)
                    exit(1)
            else:
                i += 1
        return options

    def _timeout(self):
        """
            2013-08-25:
                Get the timeout, if supplied and valid. 
                Raise an exception for an invalid timeout, return the default
                timeout otherwise.
        """
        if "-t" not in self.options:
            return self.DEFAULT_TIMEOUT
        else:
            timeoutStr = self.options['-t']
            try: 
                timeout = float(timeoutStr)
                if timeout < 0: 
                    raise ValueError
                else:
                    return timeout
            except ValueError:
                self.log.error("-t expected a postive number, received '%s'" % timeoutStr)
                exit(1)

if __name__ == "__main__":
    # First, check the short-circuit options
    options = set(sys.argv)
    if "-v" in options or "--version" in options:
        Main().print_version()
    elif "-h" in options or "--help" in options:
        Main().print_help()
    else:
        # Run some tests
        if len(sys.argv) == 1:
            # 2013-08-23: No arguments = run all tests
            sys.argv.append("")
        h = Main(*sys.argv)
        h.run()
