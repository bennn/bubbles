#!/usr/bin/env python
import subprocess, sys, re

from termcolor import colored

def generate_scripts(ocamlc_output, test_name):
    """
        2013-07-23:
            Given a list of defined names (result of compiling the test case),
            prepare unit test scripts to be run in the toplevel environment.

            Ignore and throw warnings for test cases that
            do not have type `unit -> unit`

            If `set_up : unit -> unit` is included, run this before every test case.

            TODO make sure utility functions may be included
    """
    test_cases = []
    setup = None
    for defined_name in ( x for x in ocamlc_output.split("\n") if x ):
        if not defined_name.startswith("val "):
            print colored("Warning: %s is not a value" % defined_name, "yellow")
        else:
            val_name, val_type = defined_name[4:].split(" : ", 1)
            if val_name.startswith("test_"):
                if val_type != "unit -> unit":
                    print colored("Warning: skipping %s with type %s" % \
                        (val_name, val_type))
                else:
                    test_cases.append(val_name)
            elif val_name == "set_up":
                if val_type != "unit -> unit":
                    print colored("Error: set_up function must have type unit -> unit", "red")
                    return []
                elif setup:
                    print colored("Error: set_up function defined twice", "red")
                    return []
                else:
                    setup = "Test.set_up"
    return ( (test, "module Test = %s;; %s (); Test.%s ();;" % (test_name, setup, test))
        for test in test_cases )

def test_module(module_name):
    # TODO accept commandline arguments
    # TODO support globbing
    try:
        out = subprocess.check_output("ocamlc %s.ml %s_test.ml" % (module_name, module_name), shell=True)
    except subprocess.CalledProcessError as cpe:
        # TODO what's the error?
        print colored("Error compiling [%s.ml] and [%s_test.ml]" % (module_name, module_name))
        return False
    # TODO test error handling
    # print "Compilation results = (%s)" % (out)
    try:
        out = subprocess.check_output("ocamlc -i %s.cmo %s_test.ml" % (module_name, module_name), shell=True)
    except subprocess.CalledProcessError as cpe:
        print colored("Compilation passed but could not echo files. This is #unexpected", "blue")
        all_pass = False
        out = []
    test_name = "%s_test" % module_name.capitalize()
    test_scripts = generate_scripts(out, test_name)
    all_pass = True
    for (fn_name, script) in test_scripts:
        # TODO pass a string to `ocaml` instead?
        with open("/tmp/ocamltest", "w") as f:
            f.write(script)
        try:
            print "Running %s..." % fn_name
            out = subprocess.check_output("ocaml %s.cmo %s_test.cmo /tmp/ocamltest" % (module_name, module_name), shell=True)
            print colored("success! %s" % out, "green")
        except subprocess.CalledProcessError as cpe:
            print colored("fail %s" % cpe, "red")
            all_pass = False
    return all_pass

def run():
    module_name = sys.argv[1]
    if module_name.endswith(".ml"):
      module_name = module_name[:-3]
    all_pass = test_module(module_name)
    if all_pass:
        print colored("ALL TESTS PASS", "green")
    else:
        print colored("FAILURE", "red")

if __name__ == "__main__":
    if len(sys.argv) == 2:
        run()
    else:
        print "Usage: ocamltest <mymodule>"
