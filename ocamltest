#!/usr/bin/env python
import subprocess, sys, re, os

from util.harness import Harness
from util.invalidTest import InvalidTest
from util.log import Log
from util.timer import Timer

class Main(object):

    version = "0.6"

    def __init__(self, *args):
        self.log = Log()

        # TODO this is not very error-tolerant
        self.options = self.get_options(args[1:-1])
        self.print_version = ("-v" in self.options) or ("--version" in self.options)

    def find_modules(self, pattern, directory):
        """
            2013-07-28:
                Search the filesystem (`directory` on down) for
                modules matching `pattern`
        """
        directory = self._directory_fallback(directory)
        find_command = " ".join(["find", directory, "-name", "'*%s*.ml'" % pattern])
        try:
            matchesStr = subprocess.check_output(find_command, shell=True, stderr=subprocess.STDOUT)
            # 2013-08-23: We're only concerned with test files. `xxx_test.ml`
            return (m for m in matchesStr.split("\n") if m.endswith("_test.ml"))
        except subprocess.CalledProcessError as cpe:
            self.log.error("%s  Make certain environment variable OCAMLTEST_HOME is set to a valid folder on your file system." % cpe.output)
            exit(1)

    def get_options(self, args):
        args = self._collapse_flags(args)
        return dict(zip(args[:2], args[1:2]))

    def run(self, pattern):
        """
            2013-08-23:
                Handle control flow, find the test files to be run,
                run a harness for each test file
        """
        if self.print_version:
            # TODO sync versioning with github?
            self.log.info("ocamltest version %s" % self.version)
            return
        # Make sure everything's installed well enough
        self._check_install()
        # Find test files
        to_run = list(self.find_modules(pattern, self.options.get("-d", None)))
        if not bool(to_run):
            # No tests, terminate early
            self.log.warn("Found 0 tests matching pattern")
            return
        # We have tests! Start a timer and run them.
        error_messages = {}
        with Timer() as t:
            for test_file in to_run:
                try: 
                    failures = Harness(test_file).failures
                    if bool(failures):
                        # 2013-08-23: Something went wrong, better record it.
                        test_name = test_file.split("/")[-1][:-(len(".ml"))]
                        error_messages[test_name] = failures
                except InvalidTest as e:
                    # Optionally do something based on status code
                    pass
        self.log.header("Results")
        if bool(error_messages):
            self.log.pprint_failures(error_messages, t.duration)
        else: 
            self.log.success("ALL TESTS PASS in %0.3f seconds" % t.duration)

    def _check_install(self):
        """
            2013-08-22:
                Ensure that everything's installed properly, give descriptive
                warnings if it is not.

                Requirements:
                - OCAMLTEST_HOME env. variable is set. I don't care where it points,
                    but it's supposed to point to the project root, where you want
                    to test from by default
                - ocamltest.ml is installed wherever ocamlc expects to find it
        """
        if not os.environ.get('OCAMLTEST_HOME'):
            self.log.warn("""Environment variable 'OCAMLTEST_HOME' not found. 
         Set it to your project root via the shell command `export OCAMLTEST_HOME=<path-to-your-project>`.""")
        ocamltest_files = ['ocamltest.cma', 'ocamltest.cmi', 'ocamltest.cmo']
        find_files = ( subprocess.check_output("find `ocamlc -where` -name '%s'" % fname, shell=True)
            for fname in ocamltest_files )
        if not (len(ocamltest_files) == len([x for x in find_files if x])):
            self.log.error("""ocamltest.ml not properly installed. You may either:
       - Run `make install` with root permissions
       - Manually compile 'ocamltest.ml', creating a .cma library (`ocamlc -a -o ocamltest.ml`) and then 
         moving 'ocamltest.cma', 'ocamltest.cmo', and 'ocamltest.cmi' to wherever your ocaml standard library files are stored.""")
            exit(1)

    def _collapse_flags(self, args):
        """
            2013-08-22:
                Change all long flags to short flags. For example:
                    --version => -v
        """
        new_args = []
        for arg in args:
            if arg.startswith("--"):
                new_args.append(arg[1:3])
            else:
                new_args.append(arg)
        return new_args

    def _directory_fallback(self, directory):
        """
            2013-07-28:
                Q: which part of the filesystem should we search for test files?
                A: the part the user specified with an option,
                   the part set in an environment variable,
                   or the current working directory
        """
        if directory:
            return directory
        elif os.environ.get('OCAMLTEST_HOME'):
            return os.environ.get('OCAMLTEST_HOME')
        else:
            return os.getcwd()

    def _print_help(self):
        """
            2013-07-28:
                Documentation stub.
        """
        hs = [
            "Supported options:",
            "-d --directory : use this directory as the base for the suite", #2013-07-28: TODO explain this better
            "-h --help : print this message",
            "-v --version : echo version number, then quit",
        ]
        return "\n".join(hs)

if __name__ == "__main__":
    if len(sys.argv) == 1:
        # 2013-08-23: No arguments = run all tests
        sys.argv.append("")
    h = Main(*sys.argv)
    h.run(sys.argv[-1])
