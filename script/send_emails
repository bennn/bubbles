#!/usr/bin/env python
import glob, subprocess, sys

def comment_of_numsent(num_sent):
    """
        2013-09-01:
            Just for fun.
            Echo something witty depending on the number of emails the script sent
    """
    if num_sent == 0:
        return "That was easy."
    elif num_sent < 5:
        return "Not too shabby."
    elif num_sent < 15:
        return "Whew, that was something."
    elif num_sent < 55:
        return "Glad that's over."
    elif num_sent < 150:
        return "Is everything alright?"
    elif num_sent < 200:
        return "What the heck are we sending so many emails for?"
    else:
        return "THAT WAS RIDICULOUS"

def infer_emaildir():
    """
        2013-09-01:
            Try to find the directory with autogen emails in it
    """
    find_command = " ".join([
        "find",
        "./",
        "-type",
        "d",
        "-name",
        "email",
    ])
    # 2013-09-01: Could raise an exception. I'm curious what'll appear
    matchesStr = subprocess.check_output(find_command, shell=True)
    if matchesStr:
        emaildir = matchesStr.split("\n", 1)[0]
        print("Inferred '%s' as the automatically generated directory of emails. Hope this works." % emaildir)
        return emaildir

def print_usage():
    print("Usage: send_emails <email-directory>")

def run(args):
    """
        2013-09-01:
            Given a directory of email scripts + messages (generated by the harness),
            send them off to the offending students.
    """
    if len(args) > 1:
        print_usage()
    else:
        email_dir = args[0] if len(args) == 1 else infer_emaildir()
        num_sent = 0
        for email_script in glob.glob("%s/*.sh" % email_dir):
            email_message_file = "%s.txt" % email_script[:-(len(".sh"))]
            email_command = " ".join([
                "sh",
                email_script,
                "<",
                email_message_file
            ])
            print("Sending message '%s'..."  % email_message_file)
            try:
                subprocess.check_output(email_command, shell=True)
                num_sent += 1
            except subprocess.CalledProcessError as cpe:
                print("ERROR: %s" % cpe.message)
        print("Finished sending %s emails. %s" % (num_sent, comment_of_numsent(num_sent)))

if __name__ == "__main__":
    run(sys.argv[1:])
